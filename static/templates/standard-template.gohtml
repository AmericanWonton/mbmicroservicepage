{{/* ****** BEGINNING OF HEAD SECTION ********/}}
{{define "meta-title"}}
    <meta charset="UTF-8">
    <title>Message Board Microservice</title>
{{end}}

{{define "pixel-dense"}}
    <meta name="viewport" content="width=device-width, initial-scale=1">
{{end}}

{{define "fav-icon1"}}
    <link rel="shortcut icon" type="image/png" href="static/images/favicons/database.png">
{{end}}

{{define "fonts1"}}
    <link href="https://fonts.googleapis.com/css?family=Bebas+Neue|Bowlby+One+SC|Dosis|Nunito|Odibee+Sans|Open+Sans+Condensed:300&display=swap" rel="stylesheet">
{{end}}

{{define "media-queries"}}
    <link rel="stylesheet" type="text/css" href="static/css/main.css">
{{end}}

{{define "javascript"}}
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
{{end}}

{{/******* END OF HEAD SECTION *****/}}

{{/******** BEGINNING OF HEADER SECTION ********/}}
{{define "header_div"}}
    <header>
        <div class="header_div">
            <div class="drop-down-link-divs">
                <div class="nothing_box">
                    
                </div>
                <div class="about_box">
                    <a href="index.html" class="headerLinks">About Me</a>
                </div>
                <div class="link_box">
                    <div class="dropdown">
                        <button class="dropbtn">Check Out My Work!</button>
                        <div class="dropdown-content">
                            <a href="gallery.gohtml" class="headerLinks">Event Gallery</a>
                            <a href="" class="headerLinks">DJ Mark Mixes(COMING SOON!)</a>
                        </div>
                    </div>
                </div>
                <div class="contact_me_box">
                    <a href="bookdjmark.gohtml" class="headerLinks">Book DJ Mark</a>
                </div>
            </div>
        </div>
    </header>
{{end}}
{{define "index_header"}}
    <header class="headerIndex">
        <div class="messageboardEntranceDivs">
            <div class="entranceHDogDiv">
                <button class="pageLeadButton" id="pageLeadButton" onclick="navigateHeader(3)">
                    <p class="entranceP" id="entrancePHDog">
                        Hotdog Messageboard
                    </p>
                </button>
            </div>
            <div class="entranceHamDiv">
                <button class="pageLeadButton" id="pageLeadButton" onclick="navigateHeader(4)">
                    <p class="entranceP" id="entrancePHam">
                        Hamburger Messageboard
                    </p>
                </button>
            </div>
        </div>
        <div class="entranceInfoDivs">
            <p class="entranceInfoP" id="entranceInfoP">

            </p>
        </div>
    </header>
{{end}}
{{/******** END OF HEADER SECTION ********/}}

{{/********** BEGINNING OF INDEX BODY SECTION ***********/}}
{{define "index_body_section"}}
    <div class="mainContentDiv">
        {{/* Inform user of what to do on the site */}}
        <div class="instructUserDiv">
            <p class="informTextP">
                Welcome to the MessageBoard Microservice! Take a look through the 'Documentation'
                page for further instructions. Or you can create/sign in to your account
                and test out the implementation of this app. Be sure to try sending 
                Requests to the services to see your data as well!
            </p>
        </div>
        {{/* Section to sign Users in and create accounts */}}
        <div class="signInAndUpDiv" id="signInAndUpDiv">
            {{/* Div for handling sign-up */}}
            <div class="actionDiv" id="actionDiv1">
                {{template "ajaxsignup"}}
            </div>
            {{/* Div for handling signing-in */}}
            <div class="actionDiv" id="actionDiv2">
                {{template "signInFormAjax"}}
            </div>
        </div>
    </div>
{{end}}

{{define "signInFormAjax"}}
    <div id="divformDivLogin" class="divformDiv">
        <div class="signallTitleDiv">
            <p class="signallP">
                Sign In!
            </p>
        </div>
        <div class="signInAlignmentDiv">
            {{/* USERNAME */}}
            <div class="labelDiv">
                <p class="labelPText">
                    USERNAME:
                </p>
            </div>
            <div class="inputDiv">
                <input type="text" name="username" placeholder="username" id="inputTextMobileUN" required/>
                <p class="form-field-err" id="username-err"></p>
            </div>
            {{/* PASSWORD */}}
            <div class="labelDiv">
                <p class="labelPText">
                    PASSWORD:
                </p>
            </div>
            <div class="inputDiv">
                <input type="password" name="password" placeholder="password" id="inputTextMobilePW" required/>
                <p class="form-field-err" id="password-err"></p>
            </div>
            {{/* SUBMIT BUTTON */}}
            <div class="fieldSection">
                <button id="submitLoginButton">Submit</button>
            </div>
            {{/* INFORMITIVE DIV */}}
            <div class="informativeDiv" id="informativeDivSignIn">
                <p class="informtextP" id="informtextPSignIn"></p>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        /* When 'Sign In' Button is clicked, we un-hide the Sign-In form
        and hide the other form */

        //Define elements of the 'Ajax Form'
        var inputTextMobileUN = document.getElementById("inputTextMobileUN");
        var inputTextMobilePW = document.getElementById("inputTextMobilePW");
        var submitLoginButton = document.getElementById("submitLoginButton");
        var informtextPSignIn = document.getElementById("informtextPSignIn");

        /* When clicked, submit the results of the login items;
        if successful, it will redirect to the mainpage with your newly made cookie.
        */
        submitLoginButton.addEventListener("click", function(){
            var LoginData = {
                Username: String(inputTextMobileUN.value),
                Password: String(inputTextMobilePW.value)
            };

            var jsonString = JSON.stringify(LoginData); //stringify JSON
            console.log("DEBUG: about to post to canLogin");
            //Call Ajax to see if password/username are correct
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/canLogin', true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.addEventListener('readystatechange', function(){
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    var SuccessMSG = JSON.parse(item);
                    if (SuccessMSG.SuccessNum === 0){
                        //Successful User Search
                        //Clear informtextPSignIn
                        informtextPSignIn.innerHTML = "";
                        informtextPSignIn.innerHTML = SuccessMSG.Message;
                        //This User should have their cookie. Send them to the choice page
                        //navigateHeader(6);
                        console.log("DEBUG: We should be logged in.");
                    } else {
                        //Failed User Search
                        //Clear informtextPSignIn
                        console.log("DEBUG: There was some error logging the User in:");
                        console.log(SuccessMSG.Message);
                        console.log(SuccessMSG.SuccessNum);
                        informtextPSignIn.innerHTML = "";
                        informtextPSignIn.innerHTML = SuccessMSG.Message;
                    }
                }
            });
            xhr.send(jsonString);
        });
    </script>
{{end}}

{{define "ajaxsignup"}}
    {{/* Here is the form setup,(which starts off hidden */}}
    <div class="divformDiv">
        <div class="signallTitleDiv">
            <p class="signallP">
                Sign Up!
            </p>
        </div>
        <div class="signInAlignmentDiv">
            {{/* USERNAME */}}
            <div class="labelDiv">
                <p class="labelPText">
                    USERNAME:
                </p>
            </div>
            <div class="inputDiv">
                <input type="text" id="username" name="username" placeholder="username" minlength=1 maxlength=20 required>
                <br>
                <p id="form-input-info"></p>
            </div>
            {{/* PASSWORD */}}
            <div class="labelDiv">
                <p class="labelPText">
                    PASSWORD:
                </p>
            </div>
            <div class="inputDiv">
                <input type="password" id="password" name="password" placeholder="password" minlength=8 maxlength=20 required>
                <br>
                <p id="form-input-info2"></p>
            </div>
            {{/* EMAIL */}}
            <div class="labelDiv">
                <p class="labelPText">
                    Email:
                </p>
            </div>
            <div class="inputDiv">
                <input type="text" id="email" name="email" placeholder="email" maxlength=50 required>
                <br>
                <p id="form-input-info3"></p>
            </div>
            {{/* AREA CODE */}}
            <div class="labelDiv">
                <p class="labelPText">
                    AREA CODE:
                </p>
            </div>
            <div class="inputDiv">
                <input type="number" id="areacode" name="areacode" placeholder="Area Code" maxlength=1 minlength=1 required>
                <br>
                <p id="form-input-info4"></p>
            </div>
            {{/* PHONE NUMBER */}}
            <div class="labelDiv">
                <p class="labelPText">
                    PHONE NUMBER:
                </p>
            </div>
            <div class="inputDiv">
                <input type="number" id="phonenumber" name="phonenumber" placeholder="Phone Number" maxlength=10 required>
                <br>
                <p id="form-input-info5"></p>
            </div>
            {{/* SUBMIT BUTTON */}}
            <div class="fieldSection">
                <button id="submitSignUpButton">Submit</button>
            </div>
            {{/* INFORMITIVE DIV */}}
            <div class="informativeDiv" id="informativeDivSignUp">
                <p class="informtextP" id="informtextPSignUp"></p>
            </div>
        </div>
        <div class="informFormDiv" id="informFormDiv">
            <p class="informFormP" id="informFormP"></p>
        </div>
    </div>
    {{/* On load, query available Usernames */}}
    <script>
        /* When 'Sign Up' is clicked, display the form and hide the Sign In Form */
        var signUp = document.getElementById("signup-ask-text");

        if (signUp === null){
            //Do nothing, it isn't on this page
        } else {
            //Declare the variables on the window
            var divformDivSignUp = document.getElementById("divformDivSignUp");
            divformDivSignUp.style = "display: none";
            //Listen for the button click
            signUp.addEventListener("click", function(){
                //First check to see if other sheet is open; if yes, close it
                var divformDivLogin = document.getElementById("divformDivLogin");
                if (openSignInWindow === true) {
                    openSignInWindow = false;
                    divformDivLogin.style = "display: none";
                }
                //open this sheet if needed
                if (openSignUpWindow === false){
                    divformDivSignUp.style = "display: flex";
                    divformDivSignUp.style = "flex-flow: wrap";
                    divformDivSignUp.style = "align-content: center";
                    divformDivSignUp.style = "justify-content: center";
                    divformDivSignUp.style = "width: 100%";
                    divformDivSignUp.style = "padding: 1rem";
                    openSignUpWindow = true;
                } else {
                    divformDivSignUp.style = "display: none";
                    openSignUpWindow = false;
                }
            });
        }

        var theForm = document.querySelector('#signup-form');
        var userName = document.querySelector('#username');
        var password = document.querySelector('#password');
        var email = document.getElementById("email");
        var areacode = document.getElementById("areacode");
        var phonenumber = document.getElementById("phonenumber");
        var usernameErr = document.querySelector('#form-input-info');
        var passwordErr = document.querySelector('#form-input-info2');
        var emailErr = document.getElementById("form-input-info3");
        var areaCodeErr = document.getElementById("form-input-info4");
        var phoneNumErr = document.getElementById("form-input-info5");

        // get the form elements defined in your form HTML above
        var button = document.getElementById("submitSignUpButton");

        /* Check the database for Username when the key is pressed! */
        username.addEventListener('input', function(){
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/checkUsername', true);
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    if (item == 'TooShort') {
                        usernameErr.textContent = 'Please enter a Username';
                        button.disabled = true;
                    } else if (item == 'TooLong'){
                        usernameErr.textContent = 'Username must be under 20 characters';
                        buttondisabled = true;
                    } else if (item == 'ContainsLanguage'){
                        usernameErr.textContent = 'Username is innapropriate';
                        button.disabled = true;
                    } else if (item == 'true') {
                        usernameErr.textContent = 'Username taken - Try another name!';
                        button.disabled = true;
                    } else {
                        usernameErr.textContent = '';
                        button.disabled = false;
                    }
                }
            });
            xhr.send(userName.value);
        });

        /*Check to see if password is an appropriate length! */
        password.addEventListener('input', function(){
            var passString = password.value;
            if (passString.length <= 0) {
                passwordErr.textContent = 'Please enter a password';
                button.disabled = true;
            } else if (passString.length > 20){
                passwordErr.textContent = 'Password must be under 20 characters.';
                button.disabled = true;
            } else {
                passwordErr.textContent = '';
                button.disabled = false;
            }
        });

        /* Check to see if email is appropriate length */
        email.addEventListener('input', function(){
            var emailString = email.value;
            if (emailString.length <= 0){
                emailErr.textContent = 'Need an email to test apis!';
                button.disabled = true;
            } else if (emailString.length >= 50){
                emailErr.textContent = 'Please give an email under 50 characters to test apis!';
                button.disabled = true;
            } else {
                emailErr.textContent = '';
                button.disabled = false;
            }
        });

        /*Check to see if area code is an appropriate length! */
        areacode.addEventListener('input', function(){
            var areacodeString = areacode.value;
            if (areacodeString.length <= 0) {
                areaCodeErr.textContent = 'Please enter an area code for your phone num to test API!';
                button.disabled = true;
            } else if (areacodeString.length > 1){
                areaCodeErr.textContent = 'Please enter a 1 digit area num to test APIS!';
                button.disabled = true;
            } else if (areacodeString.length != 1){
                areaCodeErr.textContent = 'Please enter a 10 digit phone num to test APIS!';
                button.disabled = true;
            } else {
                areaCodeErr.textContent = '';
                button.disabled = false;
            }
        });

        /*Check to see if area code is an appropriate length! */
        phonenumber.addEventListener('input', function(){
            var phonenumString = phonenumber.value;
            if (phonenumString.length <= 0) {
                phoneNumErr.textContent = 'Please enter phone number to test API!';
                button.disabled = true;
            } else if (phonenumString.length > 10){
                phoneNumErr.textContent = 'Please enter a 10 digit phone num to test APIS!';
                button.disabled = true;
            } else if (phonenumString.length != 10){
                phoneNumErr.textContent = 'Please enter a 10 digit phone num to test APIS!';
                button.disabled = true;
            } else {
                phoneNumErr.textContent = '';
                button.disabled = false;
            }
        });

        /* Send Email to User when fields are filled out */
        button.addEventListener("click", function(){
            var successMSG = {
                Message: "",
                SuccessNum: 3
            };
            var newUser = {
                UserName: "",
                Password: "",
                UserID:   Number(0),
                Email: "",
                PhoneACode: Number(0),
                PhoneNumber: Number(0),
                PostsMade: Number(0),
                RepliesMade: Number(0),
                DateCreated: "",
                DateUpdated: ""
            };
            newUser.UserName = userName.value;
            newUser.Password = password.value;
            newUser.Email = email.value;
            newUser.PhoneACode = Number(areacode.value);
            newUser.PhoneNumber = Number(phonenumber.value);
            var jsonString = JSON.stringify(newUser);
            //Create User and get a response
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/createUser', true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    var SuccessMSG = JSON.parse(item);
                    if (SuccessMSG.SuccessNum == 0){
                        console.log("DEBUG: User created.")
                        location.reload();
                    } else {
                        console.log("DEBUG: We have an error: " + SuccessMSG.SuccessNum + " " +
                        SuccessMSG.Message);
                        document.getElementById("informFormP").innerHTML = SuccessMSG.Message;
                        document.getElementById("informFormDiv").style.display = "block";
                    }
                }
            });
            xhr.send(jsonString);
        });
    </script>
{{end}}
 
{{/********** END OF INDEX BODY SECTION ***********/}}

{{/******** BEGINNING OF BODY SECTION *********/}}
{{define "sendJSMessageData"}}
    <script>
        //testShowData({{.}});
        messageDataInitialize({{.}});
    </script>
{{end}}

{{define "sendPageNumber"}}
    <script>
        initializeWhatPage({{.}});
    </script>
{{end}}

{{define "sendBoardType"}}
    <script>
        setBoardType({{.}});
    </script>
{{end}}

{{define "sendUsername"}}
    <script>
        setUsername({{.}});
    </script>
{{end}}

{{define "sendUserID"}}
    <script>
        setUserID({{.}});
    </script>
{{end}}

{{define "messageBoardSection"}}
    <div class="sectionHolderDiv" id="sectionHolderDiv">
        <div class="boardNameDiv" id="boardNameDiv">
            <h1 class="boardNameh1" id="boardNameh1">
                Board Name Here
            </h1>
        </div>
        <div class="board_holder" id="board_holder">
            <div class="commentOriginalDiv" id="commentOriginalDiv">
                <textarea class="textareaComment" id="textareaComment" name="textareaComment" placeholder="Add comment..."></textarea>
                <button class="commentButtonSendMsg" id="commentButtonSendMsg" onclick="orignalCommentMaker()">
                    Add comment
                </button>
            </div>
            <div class="messageboardsectionDiv" id="messageboardsectionDiv">

            </div>
            <div class="commentPageDiv" id="commentPageDiv">
                <div class="pageExplorers" id="pageExplorers">
                    <div class="pageButtonsDivs" id="pageButtonsDivs">
                        <div class="leftButtonDiv" id="leftButtonDiv">

                        </div>
                        <div class="pagesDiv" id="pagesDiv">
                            <p class="whatPageP" id="whatPageP">
                                Page 1
                            </p>
                        </div>
                        <div class="rightButtonDiv" id="rightButtonDiv">

                        </div>
                    </div>
                    <div class="goToDiv" id="goToDiv">
                        <div class="goToInputDiv" id="goToInputDiv">
                            <input type="number" class="goInput" id="goInput" name="goInput" placeholder="1">
                        </div>
                        <div class="goToButtonDiv" id="goToButtonDiv">
                            <button id="goToButton" class="goToButton">
                                Go To Page
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "messageBoardSizeTest"}}
    <div class="board_holder2" id="board_holder2">
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
        {{/* Here is our example Div */}}
        <div class="messageboardsectionDiv2" id="messageboardsectionDiv2">
            <div class="messageTextDiv2" id="messageTextDiv2">
                <p class="textP2" id="textP2">
                    Yo this is a test message and shit
                </p>
            </div>
        </div>
    </div>
{{end}}
{{/******** END OF BODY SECTION ********/}}

{{/******* BEGINNING OF CONTACT SECTION ******/}}

{{define "contact_section"}}
    <div class="contentDiv">
        <div class="informativeDiv">
            <p class="informativeP">
                Have a question for me? Want to know how I built some of this? Want some of this
                built for YOU? Reach out and let me know what's on your mind!
            </p>
        </div>
        <div class="meContactFormDiv">
            <div class="meContactForm">
                {{/* Name Field */}}
                <div class="fieldInformDiv">
                    <p class="fieldDescribeP">
                        Name:
                    </p>
                </div>
                <div class="fieldValueDiv">
                    <input type="text" class="inputreg" id="YourNameInput" name="YourNameInput" placeholder="Your Name">
                </div>
                {{/* Email */}}
                <div class="fieldInformDiv">
                    <p class="fieldDescribeP">
                        Email:
                    </p>
                </div>
                <div class="fieldValueDiv">
                    <input type="text" class="inputreg" id="YourEmailInput" name="YourEmailInput" placeholder="Your Email">
                </div>
                {{/* Message 2 Me */}}
                <div class="fieldInformDiv">
                    <p class="fieldDescribeP">
                        Message 2 Me:
                    </p>
                </div>
                <div class="fieldValueDiv">
                    <textarea  class="inputTextArea" id="YourMessageInput" name="YourMessageInput" placeholder="Got a question? Let me know!"></textarea>
                </div>
                {{/* Submit Button */}}
                <div class="fieldSubmitDiv">
                    <button class="submitB" id="submitB" onclick="sendUpdate()">Submit</button>
                </div>
                {{/* Informative Div */}}
                <div class="informResultDiv" id="informResultDiv">
                    <p class="informTxtP" id="informTxtP">

                    </p>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{/***** END OF CONTACT SECTION *******/}}

{{/****** BEGINNING OF DOCUMENTATION SECTION ******/}}

{{define "documentation_intro"}}
    <div class="documentationIntroDiv">
        <div class="greetingDiv">
            <div class="spheleDiv">
                <p class="spheleP">
                    Hello and welcome to the Microservice Messageboard. I'm Joseph Keller, the web Dev
                    behind this site!
                </p>
                <p class="spheleP">
                    The purpose of this site is to test and demonstrate various Web Development
                    and DevOps technologies implemented into a Microservice application.
                    This application is split into 3 Microservices. There's "Update",(for contacting the User with updates
                    via text and email rest APIS), "CRUD",(another set of rest APIS which are called to update our messageboards
                    through congruent calls), and "Mainpage",(which handles the page you are looking at now!)

                </p>
                <p class="spheleP">
                    I've laid out steps to building this web app below, with links to documentation
                    and videos to each section. If you have a question on any of these topics, please 
                    feel free to email me in the 'Contact' section. You can also feel free to 
                    check out this project from git, here:
                </p>
                <!-- Main page project link -->
                <p class="spheleP">
                    <!-- Github -->
                    Link to Mainpage Git: <a class="linkA" href="https://github.com/AmericanWonton/mbmicroservicepage"
                    target="_blank" alt="Github Project Link">
                        <img alt="Github Project Link" src="static/images/svg/github_pic.svg"
                        class="linkPictures">
                    </a>
                    <!-- Docker -->
                    Link to Mainpage Docker: <a class="linkA" href="https://hub.docker.com/repository/docker/americanwonton/mainwebpage"
                    target="_blank" alt="Docker Project Link">
                        <img alt="Docker Project Link" src="static/images/svg/docker.svg"
                        class="linkPictures">
                    </a>
                </p>
                <!-- Update page project link -->
                <p class="spheleP">
                    <!-- Github -->
                    Link to Update Git: <a class="linkA" href="https://github.com/AmericanWonton/updatems"
                    target="_blank" alt="Github Project Link">
                        <img alt="Github Project Link" src="static/images/svg/github_pic.svg"
                        class="linkPictures">
                    </a>
                    <!-- Docker -->
                    Link to Update Docker: <a class="linkA" href="https://hub.docker.com/repository/docker/americanwonton/update"
                    target="_blank" alt="Docker Project Link">
                        <img alt="Docker Project Link" src="static/images/svg/docker.svg"
                        class="linkPictures">
                    </a>
                </p>
                <!-- Crud page project link -->
                <p class="spheleP">
                    <!-- Github -->
                    Link to CRUD Git: <a class="linkA" href="https://github.com/AmericanWonton/crudmicroservice"
                    target="_blank" alt="Github Project Link">
                        <img alt="Github Project Link" src="static/images/svg/github_pic.svg"
                        class="linkPictures">
                    </a>
                    <!-- Docker -->
                    Link to CRUD Docker: <a class="linkA" href="https://hub.docker.com/repository/docker/americanwonton/crudoperations"
                    target="_blank" alt="Docker Project Link">
                        <img alt="Docker Project Link" src="static/images/svg/docker.svg"
                        class="linkPictures">
                    </a>
                </p>
                <p class="spheleP">
                    If you like what you see, feel free to check out my 
                    <a class="linkA" href="http://josephkeller.me/"
                    target="_blank" alt="My website">website!</a>
                </p>
            </div>
        </div>
    </div>
{{end}}

{{define "documentation_documents_block"}}
    <div class="documentations_block_div">
        {{/* HTML, CSS, GOLANG WEBDEV */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen1" onclick="documentDivDisplay(1)">
                    HTML, CSS, and Golang WebDev
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen1">
                <div class="text_body_div">
                    <p class="text_body_p">
                        For basic web-dev skills, I’ve got to hand it to Todd McLeod.
                        Golang is a nifty language for building websites and APIS, but it can be
                        intimidating learning some of the newer concepts that take advantage of
                        GoRoutines and Concurrent patterns for faster delivery. Todd is a fun,
                        energetic teacher and he makes use of widely seen use-case scenarios
                        for developers. Check out his lessons on <a class="linkA"
                        href="https://www.udemy.com/course/learn-how-to-code/"
                        target="_blank" alt="Todd Golang">Golang</a>, <a class="linkA"
                        href="https://www.udemy.com/course/html-tutorial/"
                        target="_blank" alt="Todd HTML and CSS">Creating a Website</a>, and
                        <a class="linkA" href="https://www.udemy.com/course/go-programming-language/"
                        target="_blank" alt="Todd Golang WebDev">WebDev with Golang</a>.
                    </p>
                </div>
            </div>
        </div>
        {{/* DOCKER AND DOCKER HUB */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen2" onclick="documentDivDisplay(2)">
                    Docker
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen2">
                <div class="text_body_div">
                    <p class="text_body_p">
                        Docker is a commonplace development tool, vital for making containerized
                         apps for easy implementation and development. This app is deployed in a
                          Docker shell on an AWS Ubuntu server, connecting to containerized Mongo 
                          and MySQL databases. As far as a good teacher goes, you can’t go wrong with
                           Docker’s <a class="linkA"
                        href="https://docs.docker.com/get-started/"
                        target="_blank" alt="Docker Get Started">Get Started</a> page.
                         Don’t forget to set up an account on <a class="linkA"
                        href="https://hub.docker.com/"
                        target="_blank" alt="Docker Hub">Docker Hub</a>
                            to share future projects!
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        For this specific project, I needed to tweak my Docker setup
                         just a smidge. For starters, Ubuntu will have a <a class="linkA"
                        href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04"
                        target="_blank" alt="Docker Ubuntu">unique structure</a>
                          for Docker you may want to take a look at. Depending on who is 
                          collaborating with you, it couldn’t hurt to <a class="linkA"
                        href="https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket"
                        target="_blank" alt="Docker User Setup">set up a separate User
                           account</a> as well. If you’d like to just use the root account, make sure 
                           to supersede any command with ‘sudo’ beforehand, as well as <a class="linkA"
                        href="https://docs.docker.com/engine/reference/commandline/login/"
                        target="_blank" alt="Docker Login">login to
                            your account</a> beforehand. Finally, this project required a lot of
                             debugging to determine just where my files were getting moved.
                              If you’re new to Docker, take a look at how to <a class="linkA"
                        href="https://www.baeldung.com/ops/docker-container-filesystem"
                        target="_blank" alt="Explore Container files">explore a docker container
                         filesystem</a>
                               to see just what these containers look like while operating! 
                               (Note, I’m utilizing Alpine in my Dockerfile for this project; 
                               your commands might need to look something like this when exploring 
                               the filesystem: 
                               <b class="bold_code">docker exec -it CONTAINER_HASH /bin/sh.</b>
                    </p>
                </div>
            </div>
        </div>
        {{/* CRON JOBS */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen3" onclick="documentDivDisplay(3)">
                    Cronjobs
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen3">
                <div class="text_body_div">
                    <p class="text_body_p">
                        To illustrate a ‘live data’ database, I’ve been inserting values
                         into my Mongo and SQL tables with a separate app that runs off
                          a Cron-Job. It runs daily on Tuesday evenings. You can check 
                          out the project <a class="linkA"
                        href="https://github.com/AmericanWonton/superDBAutomation"
                        target="_blank" alt="Automation Project">here</a>.
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        On my windows machine, I’d typically like scheduling this on
                         Task Scheduler. Fear not, <a class="linkA"
                        href="https://www.youtube.com/watch?v=QZJ1drMQz1A&t=101s"
                        target="_blank" alt="Cron Job Examples">Linux Cron Jobs</a>
                         aren’t too difficult
                          to comprehend! I’ve taken a copy of what I run on this server
                           as an example:
                    </p>
                </div>
                <div class="pic_body_div">
                    <img class="pic_body_img" src="static/images/png/Cron-JobExample.PNG" alt="Cronjob">
                </div>
            </div>
        </div>
        {{/* SQL AND NO-SQL Databases */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen4" onclick="documentDivDisplay(4)">
                    SQL and No-SQL
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen4">
                <div class="text_body_div">
                    <p class="text_body_p">
                        I’ve utilized Mongo Atlas to store data for this web app.
                        Check out <a class="linkA"
                        href="https://www.udemy.com/course/go-programming-language/"
                        target="_blank" alt="Todd Golang">Todd McLeod’s Udemy
                           Course</a> for Golang WebDev to learn how to set up a No-SQL DB.
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        As far as implementation in Golang is concerned,
                         you might want to check out <a class="linkA"
                        href="https://github.com/AmericanWonton/crudmicroservice"
                        target="_blank" alt="CRUD Operations Link">this project link.</a>
                          It’s been difficult getting the EXACT CRUD operations
                           I needed but I’ve fine tuned them to be as efficient as possible.
                    </p>
                </div>
            </div>
        </div>
        {{/* EMAIL API */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen5" onclick="documentDivDisplay(5)">
                    Email API
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen5">
                <div class="text_body_div">
                    <p class="text_body_p">
                        I got sick of an older API I was using to send and receive emails.
                         I decided to setup a dummy gmail account implement Google’s email APIs
                          to send and receive emails. It takes some doing,(along with a Google Dev
                           account creation), but if interested,
                           <a class="linkA"
                        href="https://medium.com/wesionary-team/sending-emails-with-go-golang-using-smtp-gmail-and-oauth2-185ee12ab306"
                        target="_blank" alt="Google Email API">here is a good article on implementing
                            it for your usage.</a>
                    </p>
                </div>
            </div>
        </div>
        {{/* TEXT API */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen6" onclick="documentDivDisplay(6)">
                    Twilio Text API
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen6">
                <div class="text_body_div">
                    <p class="text_body_p">
                        I wanted to experiment with sending text messages for an idea for another app.
                        I decided to utilize this project as a stepping stone for setting that up. Twilio
                        is a relatively easy API service to setup,(and cheap, I'd say!)
                           <a class="linkA"
                        href="https://www.twilio.com/blog/2017/09/send-text-messages-golang.html"
                        target="_blank" alt="Twilio Text API">Here is a good article on implementing
                            it for your usage.</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{/******** END OF DOCUMENTATION SECTION *****/}}

{{/******* BEGINNING OF FOOTER SECTION ******/}}
{{define "footer_div"}}
    <footer>
        <div class="footer_ContactDiv">
            {{/******** Define both clickable links to other pages ********/}}
            <div class="theContactDiv" onclick="navigateHeader(3)">
                <p class="contactP">Back to Login</p>
            </div>
        </div>
    </footer>
{{end}}
{{/******** END OF FOOTER SECTION *******/}}
